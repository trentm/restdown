#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""restdown -- Pretty REST API docs authored in Markdown

Usage:
    restdown foo.restdown

Write a Markdown file that describes your REST API -- with some light
convention structure to your doc file. Run it through `restdown` and out
pops some nice HTML for your API. Choose one of the included brands and
sex it up a bit.
"""

__version_info__ = (1, 2, 0)
__version__ = '.'.join(map(str, __version_info__))

import re
import time
import sys
import os
import codecs
import shutil
from os.path import expanduser, basename, splitext, dirname, join, abspath, isdir, exists
from glob import glob
from pprint import pprint
import logging
import json
import optparse

_saved_path = sys.path[:]
sys.path.insert(0, join(dirname(dirname(abspath(__file__))), "externals", "lib")) # dev layout
sys.path.insert(0, join(dirname(__file__))) # allow markdown2.py in same dir
import markdown2
sys.path = _saved_path
del _saved_path



#---- globals

log = logging.getLogger("restdown")

DEFAULT_BRAND = "api.no.de"

markdown_opts = {
    "extras": {
        "toc": True,
        "markdown-in-html": True,
    }
}


class RestdownError(StandardError):
    pass



#---- restdown processor

class Restdowner(markdown2.Markdown):
    # Use this Markdown hook to:
    # - exclude first h1 from the TOC
    # - do custom translation of h2 text to id (h2's are the API endpoints)
    _skipped_first_h1 = False
    def header_id_from_text(self, text, prefix, n):
        if n == 1 and not self._skipped_first_h1:
            self._skipped_first_h1 = True
        elif n == 1:
            return super(Restdowner, self).header_id_from_text(text, prefix, n)
        elif n == 2:
            # "GET /sshkeys/:id" -> "GET-/sshkeys/:id"
            return text.replace(' ', '-')

    _endpoint_header_re = re.compile(
        r'''^(<h2.*?>)([A-Z]+\s+.*?)(</h2>)$''', re.M)
    _pre_command_block_re = re.compile(r'<pre><code>\$ (.*?)</code></pre>', re.S)
    _first_h1_and_block_re = re.compile(r'(<h1.*?</h1>)(.*?)(?=<h1)', re.S)
    def postprocess(self, text):
        # Add internal '<span>' markup to endpoint h2's for styling.
        text = self._endpoint_header_re.sub(
            r'\1<span>\2</span>\3', text)

        # Identify shell pre-blocks for styling.
        text = self._pre_command_block_re.sub(
            r'<pre class="shell"><code>\1</code></pre>', text)

        # First h1 body is wrapped in `<div class="intro">`.
        text = self._first_h1_and_block_re.sub(
            r'\n\1\n<div class="intro">\n\2\n</div>\n', text, 1)

        return text

    # Add some markup to endpoint entries in the TOC html for styling.
    _endpoint_re = re.compile(r'^([A-Z]+)(\s+)(.*?)$')
    def _toc_add_entry(self, level, id, name):
        if level == 2:
            name = self._endpoint_re.sub(
                r'<span class="verb">\1</span>\2<span>\3</span>', name)
        super(Restdowner, self)._toc_add_entry(level, id, name)

def restdown_path(path, brand_dir=None, copy_brand_media_to=None):
    markdown = codecs.open(path, 'r', 'utf-8').read()
    metadata = {}
    if markdown.startswith("---"):
        _, metastr, markdown = re.compile(r"^---[ \t]*$", re.M).split(
            markdown, 2)
        for line in metastr.strip().splitlines(False):
            line = line.strip()
            if not line:
                continue
            k, v = line.split(':', 1)
            metadata[k.strip()] = v.strip()
    if "title" not in metadata:
        title = ' '.join(s.capitalize()
            for s in splitext(basename(path))[0].split('-'))
        metadata["title"] = title
    html, data = restdown(metadata, markdown, brand_dir)

    base, ext = splitext(basename(path))
    html_path = join(dirname(path), base + ".html")
    codecs.open(html_path, "w", "utf-8").write(html)
    log.info("wrote %s", html_path)
    json_path = join(dirname(path), base + ".json")
    codecs.open(json_path, "w", "utf-8").write(
        json.dumps(data, sort_keys=True, indent=2) + "\n")
    log.info("wrote %s", json_path)

    if copy_brand_media_to is not None:
        if not isdir(copy_brand_media_to):
            raise RestdownError("'%s' does not exist or is not a dir" % copy_brand_media_to)
        src = join(brand_dir or _get_brand_dir(metadata.get("brand")), "media")
        dst = join(copy_brand_media_to, "media")
        _copy_dir(src, dst)

def restdown(metadata, markdown, brand_dir=None):
    """Convert the given metadata and markdown content to restdown HTML.

    @param metadata {dict} Relevant metadata keys are:
        "title"    the HTML document title
        "brand"    the brand to use for styling/images etc.
        "version"  version string for the API
    @param markdown {str} The markdown content to convert
    @param brand_dir {str} Brand directory (including a 'header.html.in' et al)
        to use. If not given it uses the default brand in the restdown
        installation.
    @returns {str, dict} The HTML document (full page) and a dict giving
        data about the API: version, endpoints.
    """
    html = Restdowner(**markdown_opts).convert(markdown)
    metadata["toc_html"] = html.toc_html

    if brand_dir is None:
        brand_dir = _get_brand_dir(metadata.get("brand"))
    header_in = codecs.open(join(brand_dir, "header.html.in"), 'r', 'utf-8').read()
    header = header_in % metadata
    footer_in = codecs.open(join(brand_dir, "footer.html.in"), 'r', 'utf-8').read()
    footer = footer_in % metadata

    bits = [header]
    bits.append(u"""
    <div id="sidebar">
%(toc_html)s
    </div>
    <div id="content">
""" % metadata)
    bits.append(html)
    bits.append(u"\n    </div>\n")
    bits.append(footer)

    endpoints = [name.split('-', 1)
        for n, name, html in html._toc if n == 2]

    consistent_fmt = True
    for e in endpoints:
        if (len(e) != 2):
            consistent_fmt = False
            break

    if consistent_fmt:
        data = {
            "endpoints": ["%-6s %s" % tuple(e) for e in endpoints],
            }
    else:
        data = {
            "endpoints": ["%s" % ' '.join(e) for e in endpoints],
            }

    if "version" in metadata:
        data["version"] = metadata["version"]
    return u''.join(bits), data



#---- internal support stuff

def _copy_dir(src, dst):
    """Copy `src` dir to `dst` dir, updating already existing files.

    Note: This does NOT delete files in dst that don't exist in src.
    """
    for dirpath, dirnames, filenames in os.walk(src):
        for f in filenames:
            srcpath = join(dirpath, f)
            if dirpath == src:
                dstpath = join(dst, f)
            else:
                dstpath = join(dst, dirpath[len(src)+1:], f)
            if not exists(dirname(dstpath)):
                os.makedirs(dirname(dstpath))
            dstpath_exists = exists(dstpath)
            if dstpath_exists and _md5path(dstpath) == _md5path(srcpath):
                pass
            else:
                if dstpath_exists:
                    log.info("update %s", dstpath)
                else:
                    log.info("cp %s", dstpath)
                shutil.copy(srcpath, dstpath)

def _md5path(path):
    try:
        from hashlib import md5
    except ImportError:
        from md5 import md5
    f = open(path, 'rb')
    try:
        return md5(f.read()).hexdigest()
    finally:
        f.close()

def _get_brand_dir(brand=None):
    if brand is None:
        brand = DEFAULT_BRAND
    return join(dirname(dirname(abspath(__file__))), "brand", brand)

class _LowerLevelNameFormatter(logging.Formatter):
    def format(self, record):
        record.lowerlevelname = record.levelname.lower()
        return logging.Formatter.format(self, record)

def _setup_logging():
    hdlr = logging.StreamHandler(sys.stdout)
    fmt = "%(name)s: %(lowerlevelname)s: %(message)s"
    fmtr = _LowerLevelNameFormatter(fmt=fmt)
    hdlr.setFormatter(fmtr)
    logging.root.addHandler(hdlr)

class _NoReflowFormatter(optparse.IndentedHelpFormatter):
    """An optparse formatter that does NOT reflow the description."""
    def format_description(self, description):
        return description or ""



#---- mainline

def main(argv=sys.argv):
    _setup_logging()
    log.setLevel(logging.INFO)

    # Parse options.
    parser = optparse.OptionParser(prog="restdown", usage='',
        version="%prog " + __version__, description=__doc__,
        formatter=_NoReflowFormatter())
    parser.add_option("-v", "--verbose", dest="log_level",
        action="store_const", const=logging.DEBUG,
        help="more verbose output")
    parser.add_option("-q", "--quiet", dest="log_level",
        action="store_const", const=logging.WARNING,
        help="quieter output (just warnings and errors)")
    parser.add_option("-m", "--copy-brand-media-to", metavar="DIR",
        help="also copy brand 'media/' dir to the given output dir")
    parser.add_option("-b", "--brand-dir", metavar="DIR",
        help="brand dir to use for constructing HTML. Defaults to "
             "'brand/%s' in the restdown install." % DEFAULT_BRAND)
    parser.set_defaults(log_level=logging.INFO, copy_brand_media_to=None,
        brand_dir=None)
    opts, paths = parser.parse_args()
    log.setLevel(opts.log_level)

    for path in paths:
        restdown_path(path, brand_dir=opts.brand_dir,
            copy_brand_media_to=opts.copy_brand_media_to)

## {{{ http://code.activestate.com/recipes/577258/ (r4)
if __name__ == "__main__":
    try:
        retval = main(sys.argv)
    except KeyboardInterrupt:
        sys.exit(1)
    except SystemExit:
        raise
    except:
        import traceback, logging
        if not log.handlers and not logging.root.handlers:
            logging.basicConfig()
        skip_it = False
        exc_info = sys.exc_info()
        if hasattr(exc_info[0], "__name__"):
            exc_class, exc, tb = exc_info
            if isinstance(exc, IOError) and exc.args[0] == 32:
                # Skip 'IOError: [Errno 32] Broken pipe': often a cancelling of `less`.
                skip_it = True
            if not skip_it:
                tb_path, tb_lineno, tb_func = traceback.extract_tb(tb)[-1][:3]
                log.error("%s (%s:%s in %s)", exc_info[1], tb_path,
                    tb_lineno, tb_func)
        else:  # string exception
            log.error(exc_info[0])
        if not skip_it:
            if log.isEnabledFor(logging.DEBUG):
                print()
                traceback.print_exception(*exc_info)
            sys.exit(1)
    else:
        sys.exit(retval)
## end of http://code.activestate.com/recipes/577258/ }}}
